
# Diff Configuration.
######################### Global config #########################
# 日志级别，可以设置为 info、debug
log-level = "info"

# sync-diff-inspector 根据主键／唯一键／索引将数据划分为多个 chunk，
# 对每一个 chunk 的数据进行对比。使用 chunk-size 设置 chunk 的大小
chunk-size = {{.ChunkSize}}

# 检查数据的线程数量
check-thread-count = {{.CheckThreadsCount}}

# 抽样检查的比例，如果设置为 100 则检查全部数据
sample-percent = 100

# 通过计算 chunk 的 checksum 来对比数据，如果不开启则逐行对比数据
use-checksum = true

# 如果设置为 true 则只会通过计算 checksum 来校验数据，如果上下游的 checksum 不一致也不会查出数据再进行校验
only-use-checksum = false

# 是否使用上次校验的 checkpoint，如果开启，则只校验上次未校验以及校验失败的 chunk
# 对于 tichecker 来说，必须关闭不使用
use-checkpoint = false

# 不对比数据
ignore-data-check = false

# 不对比表结构
ignore-struct-check = false

# fixed 修复 SQL
fix-sql-file = "{{.FixSQLFile}}"

######################### Tables config #########################
# 对于 tichecker 来说，必须手工配置
# 配置需要对比的目标数据库 tidb 中的表
[[check-tables]]
# 库的名称
schema = "dm_marvin"
# 需要检查的表的名称
tables = ["t_marvin"]

# 配置该表对应分表配置
[[table-config]]
# tidb 目标库名
schema = "dm_marvin"
# tidb 目标库表名
table = "t_marvin"
# 是否是分库分表场景
is-sharding = true
# 对比查询范围
range = "{{.RangCond}}"

# 源数据表的配置 mysql
[[table-config.source-tables]]
instance-id = "MySQL-1"
schema = "dm_marvin"
table = "t_marvin1"

[[table-config.source-tables]]
instance-id = "MySQL-2"
schema = "dm_marvin"
table = "t_marvin2"

######################### Databases config #########################

# 源数据库实例的配置
[[source-db]]
host = "192.168.2.90"
port = 3308
user = "root"
password = "marvin"
instance-id = "MySQL-1"
# 源数据库实例的配置
[[source-db]]
host = "192.168.2.90"
port = 3307
user = "root"
password = "marvin"
instance-id = "MySQL-2"

# 目标数据库实例的配置
[target-db]
host = "192.168.2.90"
port = 5000
user = "marvin"
password = "marvin"
instance-id = "target-1"